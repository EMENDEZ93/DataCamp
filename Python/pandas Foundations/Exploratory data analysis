Q1:-
Create a list of y-axis column names called y_columns consisting of 'AAPL' and 'IBM'.
Generate a line plot with x='Month' and y=y_columns as inputs.
Give the plot a title of 'Monthly stock prices'.
Specify the y-axis label.
Display the plot.

Solution:-
# Create a list of y-axis column names: y_columns
y_columns = ['AAPL','IBM']

# Generate a line plot
df.plot(x='Month', y=y_columns)

# Add the title
plt.title('Monthly stock prices')

# Add the y-axis label
plt.ylabel('Price ($US)')

# Display the plot
plt.show()

Q2:-
Generate a scatter plot with 'hp' on the x-axis and 'mpg' on the y-axis. Specify s=sizes.
Add a title to the plot.
Specify the x-axis and y-axis labels.

Solution:-
# Generate a scatter plot
df.plot(kind='scatter', x='hp', y='mpg', s=sizes)

# Add the title
plt.title('Fuel efficiency vs Horse-power')

# Add the x-axis label
plt.xlabel('Horse-power')

# Add the y-axis label
plt.ylabel('Fuel efficiency (mpg)')

# Display the plot
plt.show()

Q3:-
Make a list called cols of the column names to be plotted: 'weight' and 'mpg'. You can then access it using df[cols].
Generate a box plot of the two columns in a single figure. To do this, specify subplots=True

Solution:-
# Make a list of the column names to be plotted: cols
cols = ['weight','mpg']

# Generate the box plots
df[cols].plot(kind='box',subplots=True)

# Display the plot
plt.show()

Q4:-
Plot a PDF for the values in fraction with 30 bins between 0 and 30%. 
The range has been taken care of for you. ax=axes[0] means that this plot will appear in the first row.
Plot a CDF for the values in fraction with 30 bins between 0 and 30%. 
Again, the range has been specified for you. To make the CDF appear on the second row, you need to specify ax=axes[1].

Solution:-
# This formats the plots such that they appear on separate rows
fig, axes = plt.subplots(nrows=2, ncols=1)

# Plot the PDF
df.fraction.plot(ax=axes[0], kind='hist', bins=30, normed=True, range=(0,.3))
plt.show()

# Plot the CDF
df.fraction.plot(kind='hist', bins=30, cumulative=True, normed=True, ax=axes[1], range=(0,.3))
plt.show()

Q5:-
Print the minimum value of the 'Engineering' column.
Print the maximum value of the 'Engineering' column.
Construct the mean percentage per year with .mean(axis='columns'). Assign the result to mean.
Plot the average percentage per year. 
Since 'Year' is the index of df, it will appear on the x-axis of the plot. No keyword arguments are needed in your call to .plot().

Solution:-
# Print the minimum value of the Engineering column
print(df['Engineering'].min())

# Print the maximum value of the Engineering column
print(df['Engineering'].max())

# Construct the mean percentage per year: mean
mean = df.mean(axis='columns')

# Plot the average percentage per year
mean.plot()

# Display the plot
plt.show()

Q6:-
Print summary statistics of the 'fare' column of df with .describe() and print(). Note: df.fare and df['fare'] are equivalent.
Generate a box plot of the 'fare' column.

Solution:-
# Print summary statistics of the fare column with .describe()
print(df['fare'].describe())

# Generate a box plot of the fare column
df.fare.plot(kind='box')

# Show the plot
plt.show()

Q7:-
Print the number of countries reported in 2015. To do this, use the .count() method on the '2015' column of df.
Print the 5th and 95th percentiles of df. To do this, use the .quantile() method with the list [0.05, 0.95].
Generate a box plot using the list of columns provided in years. 
This has already been done for you, so click on 'Submit Answer' to view the result!

Solution-
# Print the number of countries reported in 2015
print(df['2015'].count())

# Print the 5th and 95th percentiles
print(df.quantile([0.05, 0.95]))

# Generate a box plot
years = ['1800','1850','1900','1950','2000']
df[years].plot(kind='box')
plt.show()

Q8:-
Compute and print the means of the January and March data using the .mean() method.
Compute and print the standard deviations of the January and March data using the .std() method.

Solution:-
# Print the mean of the January and March data
print(january.mean(), march.mean())

# Print the standard deviation of the January and March data
print(january.std(), march.std())

Q9:-
Filtering and counting
How many automobiles were manufactured in Asia in the automobile dataset? 
The DataFrame has been provided for you as df. Use filtering and the .count() member method to determine the number of rows where the 'origin' column has the value 'Asia'.
As an example, you can extract the rows that contain 'US' as the country of origin using df[df['origin'] == 'US'].

Solution:-
df[df['origin'] == 'Asia'].count()

Q10:-
Compute the global mean and global standard deviations of df using the .mean() and .std() methods. 
Assign the results to global_mean and global_std.
Filter the 'US' population from the 'origin' column and assign the result to us.
Compute the US mean and US standard deviations of us using the .mean() and .std() methods. Assign the results to us_mean and us_std.
Print the differences between us_mean and global_mean and us_std and global_std. This has already been done for you.

Solution:-
# Compute the global mean and global standard deviation: global_mean, global_std
global_mean = df.mean()
global_std = df.std()

# Filter the US population from the origin column: us
us = df[df['origin']=='US']

# Compute the US mean and US standard deviation: us_mean, us_std
us_mean = us.mean()
us_std = us.std()

# Print the differences
print(us_mean - global_mean)
print(us_std - global_std)

Q11:-
Inside plt.subplots(), specify the nrows and ncols parameters so that there are 3 rows and 1 column.
Filter the rows where the 'pclass' column has the values 1 and generate a box plot of the 'fare' column.
Filter the rows where the 'pclass' column has the values 2 and generate a box plot of the 'fare' column.
Filter the rows where the 'pclass' column has the values 3 and generate a box plot of the 'fare' column.

Solution:-
# Display the box plots on 3 separate rows and 1 column
fig, axes = plt.subplots(nrows=3, ncols=1)

# Generate a box plot of the fare prices for the First passenger class
titanic.loc[titanic['pclass'] == 1].plot(ax=axes[0], y='fare', kind='box')

# Generate a box plot of the fare prices for the Second passenger class
titanic.loc[titanic['pclass'] == 2].plot(ax=axes[1], y='fare', kind='box')

# Generate a box plot of the fare prices for the Third passenger class
titanic.loc[titanic['pclass'] == 3].plot(ax=axes[2], y='fare', kind='box')

# Display the plot
plt.show()
