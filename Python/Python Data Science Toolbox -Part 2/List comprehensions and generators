Q1:-
Using the range of numbers from 0 to 9 as your iterable and i as your iterator variable, write a list comprehension that produces a list of numbers consisting of the squared values of i.

Solution:-
# Create list comprehension: squares
squares = [i*i for i in range(0,10)]

Q2:-
In the inner list comprehension - that is, the output expression of the nested list comprehension - create a list of values from 0 to 4 using range(). Use col as the iterator variable.
In the iterable part of your nested list comprehension, use range() to count 5 rows - that is, create a list of values from 0 to 4. 
Use row as the iterator variable; note that you won't be needing this to create values in the list of lists.

Solution:-
# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(0,5)] for row in range(0,5)]

# Print the matrix
for row in matrix:
    print(row)

Q3:-
Use member as the iterator variable in the list comprehension. For the conditional, use len() to evaluate the iterator variable. 
Note that you only want strings with 7 characters or more.

Solution:-
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member for member in fellowship if len(member) >= 7]

# Print the new list
print(new_fellowship)

Q4:-
In the output expression, keep the string as-is if the number of characters is >= 7, else replace it with an empty string - that is, '' or "".

Solution:-
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member if len(member) >= 7 else "" for member in fellowship]

# Print the new list
print(new_fellowship)

Q5:-
Create a dict comprehension where the key is a string in fellowship and the value is the length of the string. 
Remember to use the syntax key:value in the output expression part of the comprehension to create the members of the dictionary. 
Use member as the iterator variable.

Solution:-
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member:len(member) for member in fellowship}

# Print the new list
print(new_fellowship)

Q6:-
