Q1:-
Import pandas using the alias pd.
Read the file police.csv into a DataFrame named ri.
Examine the first 5 rows of the DataFrame (known as the "head").
Count the number of missing values in each column: Use .isnull() to check which DataFrame elements are missing, and then take the .sum() to count the number of True values in each column.

Solution:-
# Import the pandas library as pd
import pandas as pd

# Read 'police.csv' into a DataFrame named ri
ri = pd.read_csv('police.csv')

# Examine the head of the DataFrame
print(ri.head())

# Count the number of missing values in each column
print(ri.isnull().sum())

Q2:-
Count the number of missing values in each column. (This has been done for you.)
Examine the DataFrame's .shape to find out the number of rows and columns.
Drop both the county_name and state columns by passing the column names to the .drop() method as a list of strings.
Examine the .shape again to verify that there are now two fewer columns.

Solution:-
# Count the number of missing values in each column
print(ri.isnull().sum())

# Examine the shape of the DataFrame
print(ri.shape)

# Drop the 'county_name' and 'state' columns
ri.drop(['county_name', 'state'], axis='columns', inplace=True)

# Examine the shape of the DataFrame (again)
print(ri.shape)

Q3:-
Count the number of missing values in each column.
Drop all rows that are missing driver_gender by passing the column name to the subset parameter of .dropna().
Count the number of missing values in each column again, to verify that none of the remaining rows are missing driver_gender.
Examine the DataFrame's .shape to see how many rows and columns remain.

Solution:-
# Count the number of missing values in each column
print(ri.isnull().sum())

# Drop all rows that are missing 'driver_gender'
ri.dropna(subset=['driver_gender'], inplace=True)

# Count the number of missing values in each column (again)
print(ri.isnull().sum())

# Examine the shape of the DataFrame
print(ri.shape)

Q4:-
Examine the head of the is_arrested column to verify that it contains True and False values.
Check the current data type of is_arrested.
Use the .astype() method to convert is_arrested to a bool column.
Check the new data type of is_arrested, to confirm that it is now a bool column.

Solution:-
# Examine the head of the 'is_arrested' column
print(ri.is_arrested.head())

# Check the data type of 'is_arrested'
print(ri.is_arrested.dtype)

# Change the data type of 'is_arrested' to 'bool'
ri['is_arrested'] = ri.is_arrested.astype('bool')

# Check the data type of 'is_arrested' (again)
print(ri.is_arrested.dtype)

Q5:-
Use a string method to concatenate stop_date and stop_time (separated by a space), and store the result in combined.
Convert combined to datetime format, and store the result in a new column named stop_datetime.
Examine the DataFrame .dtypes to confirm that stop_datetime is a datetime column.

Solution:-
# Concatenate 'stop_date' and 'stop_time' (separated by a space)
combined = ri.stop_date.str.cat(ri.stop_time, sep=' ')

# Convert 'combined' to datetime format
ri['stop_datetime'] = pd.to_datetime(combined)

# Examine the data types of the DataFrame
print(ri.dtypes)

Q6:-
Set stop_datetime as the DataFrame index.
Examine the index to verify that it is a DatetimeIndex.
Examine the DataFrame columns to confirm that stop_datetime is no longer one of the columns.

Solution:-
# Set 'stop_datetime' as the index
ri.set_index('stop_datetime', inplace=True)

# Examine the index
print(ri.index)

# Examine the columns
print(ri.columns)
